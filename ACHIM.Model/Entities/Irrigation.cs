//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 28.03.2016 14:46:06
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace postgresModel
{

    /// <summary>
    /// There are no comments for postgresModel.Irrigation in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="postgresModel", Name="Irrigation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Irrigation : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Irrigation object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="plantId">Initial value of PlantId.</param>
        public static Irrigation CreateIrrigation(int id, int plantId)
        {
            Irrigation irrigation = new Irrigation();
            irrigation.Id = id;
            irrigation.PlantId = plantId;
            return irrigation;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Timestamp in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> Timestamp
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _Timestamp;
                OnGetTimestamp(ref value);
                return value;
            }
            set
            {
                if (_Timestamp != value)
                {
                  OnTimestampChanging(ref value);
                  ReportPropertyChanging("Timestamp");
                  _Timestamp = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Timestamp");
                  OnTimestampChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _Timestamp;
        partial void OnGetTimestamp(ref global::System.Nullable<System.DateTime> value);
        partial void OnTimestampChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnTimestampChanged();
    
        /// <summary>
        /// There are no comments for PlantId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int PlantId
        {
            get
            {
                int value = _PlantId;
                OnGetPlantId(ref value);
                return value;
            }
            set
            {
                if (_PlantId != value)
                {
                  OnPlantIdChanging(ref value);
                  ReportPropertyChanging("PlantId");
                  _PlantId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PlantId");
                  OnPlantIdChanged();
              }
            }
        }
        private int _PlantId;
        partial void OnGetPlantId(ref int value);
        partial void OnPlantIdChanging(ref int value);
        partial void OnPlantIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Plant in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("postgresModel", "Plant_Irrigation", "Plant")]
        public Plant Plant
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Plant>("postgresModel.Plant_Irrigation", "Plant").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Plant>("postgresModel.Plant_Irrigation", "Plant").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Plant in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Plant> PlantReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Plant>("postgresModel.Plant_Irrigation", "Plant");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Plant>("postgresModel.Plant_Irrigation", "Plant", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Plant>("postgresModel.Plant_Irrigation", "Plant").Value = null;
                }
            }
        }

        #endregion
    }

}
